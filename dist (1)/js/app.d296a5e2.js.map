{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue","webpack:///./src/App.vue?dfb6","webpack:///./src/registerServiceWorker.js","webpack:///./src/router/index.js","webpack:///./src/store/modules/cards.js","webpack:///./src/store/modules/gameplay/state.js","webpack:///./src/store/modules/gameplay/gamesetup.js","webpack:///./src/store/modules/gameplay/gameplay.js","webpack:///./src/store/modules/gameplay/ai.js","webpack:///./src/store/modules/gameplay/index.js","webpack:///./src/store/modules/display.js","webpack:///./src/store/index.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","render","register","process","ready","log","registered","cached","updatefound","updated","offline","routes","path","component","router","createRouter","history","createWebHistory","state","cards","icon","cost","activation","quantity","set","description","getters","getStarterBase","filter","card","base","mutations","close_card","display","actions","context","commit","NewGame","DiceRange","Dice","HasDice2","Doubles","Reroll","FinishedRoll","SpecialDice","Expansion","NumPlayers","Deck","MarketPlace","PopUpCard","CallCard","CardGive","CardTake","StarterHand","TurnPlayer","IterPlayer","TurnPlayerOwe","IterPlayerOwe","SelectPlayer","SecondTurn","IterOrder","AirportCheckIn","GlobalSwipe","aiProjectedMoney","aiDice","aiStrategy","aiStrategies","dice","aiLandmarks","TestCard","Players","id","money","hand","landmarks","ai","is","strategy","setNewGame","payload","setExpansion","setAI","setPlayerName","loadDeck","setStarterHand","setMarketPlace","setNumPlayers","DealGame","shCard","getNumPlayersNewGame","dispatch","confirm","setNumPlayersNewGame","rootState","baseHand","forEach","copyCards","expDeck","expCard","tempDeck","assign","shuffle","reloadMarketPlace","tempMarketPlace","getMP","gameplay","TS","SM","AP","RT","H","A","tempCard","pop","hasCard","temp","ResetGame","SetUpNewGame","SetUpQuickGameBase","SetUpQuickGameExpansion","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","newArray","getDice","setGlobalSwipe","rollDice","min","max","setDiceRange","setDoubles","setHasDice2","setHarbor","setAirportCheckIn","setSecondTurn","modMoney","playerInd","getPlayerIndex","amount","transferMoney","fromPlayer","toPlayer","buyCard","currPlayer","setPopUpCard","setSelectCardGive","setSelectCardTake","SwapCards","p1","p2","give","take","giveHand","find","takeHand","findIndex","giveCard","takeCard","setTurnPlayer","setIterPlayer","setSelectPlayer","setIterOrder","nextPlayerTurn","curr","rndNum","doubles","includes","getAllState","checkAirportCheckIn","checkTrainStation","checkAmusementPark","alert","checkCityHall","checkNextTurnAI","nextPlayer","endGame","Controller","playerTurn","calcHand","calcCard","player","shoppingMall","getNumIcons","getNumCards","harbor","getNumIcons2","isNaN","toUpperCase","setAIDice","setAIStrategy","setAIStrategies","setAILandmarks","setAIMoney","aiModMoney","aiTransferMoney","aiChooseRollTwoDice","some","aiChooseReroll","aiChooseHarborAdd","oDice","newDice","aiBuyCards","tm","boughtCard","h","aiPlayerTurn","aiCalcHand","aiCalcCard","namespaced","gamesetup","NewGameDisplay","TabDisplay","GameTabDisplay","MarketPlaceTabDisplay","NumPlayersDisplay","MarketPlaceDisplay","DiceDisplay","CardDisplay","PickPlayerModalDisplay","PickPlayerCardsModalDisplay","Player1Display","Player2Display","Player3Display","Player4Display","Player5Display","AllPlayerDisplay","GetPlayerDisplay","SetNewGameDisplay","SetTabDisplay","SetGameTabDisplay","SetMarketPlaceTabDisplay","SetNumPlayersDisplay","SetMarketPlaceDisplay","SetDiceDisplay","SetCardDisplay","SetPickPlayerModalDisplay","SetPickPlayerCardsModalDisplay","SetAllPlayerDisplay","SetPlayerDisplay","ShowGame","ShowMarketplace","createStore","app","createApp","App","use","store","mount"],"mappings":"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","file":"js/app.d296a5e2.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-139772f0\":\"e8743864\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-139772f0\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-139772f0\":\"cbb696aa\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","<template>\n  <!-- <div id=\"nav\">\n    <NavBar />\n  </div> -->\n  <router-view/>\n</template>\n\n<script>\n// import NavBar from './components/Navbar.vue'\nexport default {\n  // components: {NavBar}\n}\n</script>\n\n<style>\n\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=6d7521db\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import { createRouter, createWebHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Main',\n    component: () => import('../views/Main.vue')\n  },\n\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport default router\n","\r\nconst state = {\r\n  // type: primary, secondary, major, landmark, restaurants\r\n  // icons: wheat, cow, gear, bread, factory, fruit, cup, tower, boat\r\n\r\n  cards: [\r\n    {name: 'Wheat Field', type: 'primary', icon: 'wheat', cost: 1, activation: [1], quantity: 6, set: 'base', description: \"Get 1 coin from the bank, on anyone's turn\"}, \r\n    {name: 'Wheat Field', type: 'primary', icon: 'wheat', cost: 1, activation: [1], quantity: 4, set: 'starter', description:\"Get 1 coin from the bank, on anyone's turn\"},\r\n    {name: 'Wheat Field', type: 'primary', icon: 'wheat', cost: 1, activation: [1], quantity: 1, set: 'harbor', description:\"Get 1 coin from the bank, on anyone's turn\"},\r\n    {name: 'Ranch', type: 'primary', icon: 'cow', cost: 1, activation: [2], quantity: 6, set: 'base', description:\"Get 1 coin from the bank, on anyone's turn\"},\r\n    {name: 'Bakery', type: 'secondary', icon: 'bread', cost: 1, activation: [2,3], quantity: 6, set: 'base', description:\"Get 1 coin from the bank, on your turn only\"},\r\n    {name: 'Bakery', type: 'secondary', icon: 'bread', cost: 1, activation: [2,3], quantity: 4, set: 'starter', description:\"Get 1 coin from the bank, on your turn only\"},\r\n    {name: 'Bakery', type: 'secondary', icon: 'bread', cost: 1, activation: [2,3], quantity: 1, set: 'harbor', description:\"Get 1 coin from the bank, on your turn only\"},\r\n    {name: 'Cafe', type: 'restaurants', icon: 'cup', cost: 2, activation: [3], quantity: 6, set: 'base', description:\"Get 1 coin from the player who rolled the dice\"},\r\n    {name: 'Convenience Store', type: 'secondary', icon: 'bread', cost: 2, activation: [4], quantity: 6, set: 'base', description:\"Get 3 coin from the bank, on your turn only\"},\r\n    {name: 'Forest', type: 'primary', icon: 'gear', cost: 3, activation: [5], quantity: 6, set: 'base', description:\"Get 1 coin from the bank, on anyone's turn\"},\r\n    {name: 'Cheese Factory', type: 'secondary', icon: 'factory', cost: 5, activation: [7], quantity: 6, set: 'base', description:\"Get 3 coins from the bank for each [cow] establishment that you own, on your turn only\"},\r\n    {name: 'Furniture Factory', type: 'secondary', icon: 'factory', cost: 3, activation: [8], quantity: 6, set: 'base', description:\"Get 3 coins from the bank for each [gear] establishment that you own, on your turn only\"},\r\n    {name: 'Mine', type: 'primary', icon: 'gear', cost: 6, activation: [9], quantity: 6, set: 'base', description:\"Get 5 coins from the bank, on anyone's turn\"},\r\n    {name: 'Family Restaurant', type: 'restaurants', icon: 'cup', cost: 3, activation: [9,10], quantity: 6, set: 'base', description:\"Get 2 coins from the player who rolled the dice\"},\r\n    {name: 'Apple Orchard', type: 'primary', icon: 'wheat', cost: 3, activation: [10], quantity: 6, set: 'base', description:\"Get 3 coins from the bank, on anyone's turn\"},\r\n    {name: 'Fruit and Vegetable Market', type: 'secondary', icon: 'fruit', cost: 2, activation: [11,12], quantity: 6, set: 'base', description:\"Get 2 coins from the bank for each [wheat] establishment that you own, on your turn only\"},\r\n    {name: 'Stadium', type: 'major', icon: 'tower', cost: 6, activation: [6], quantity: 4, set: 'base', description:\"Get 2 coins from all players, on your turn only\"},\r\n    {name: 'Stadium', type: 'major', icon: 'tower', cost: 6, activation: [6], quantity: 1, set: 'harbor', description:\"Get 2 coins from all players, on your turn only\"},\r\n    {name: 'TV Station', type: 'major', icon: 'tower', cost: 7, activation: [6], quantity: 4, set: 'base', description:\"Take 5 coins from any one player, on your turn only\"},\r\n    {name: 'TV Station', type: 'major', icon: 'tower', cost: 7, activation: [6], quantity: 1, set: 'harbor', description:\"Take 5 coins from any one player, on your turn only\"},\r\n    {name: 'Business Center', type: 'major', icon: 'tower', cost: 8, activation: [6], quantity: 4, set: 'base', description:\"Trade one Non [tower] establishment with another player, on your turn only\"},\r\n    {name: 'Business Center', type: 'major', icon: 'tower', cost: 8, activation: [6], quantity: 1, set: 'harbor', description:\"Trade one Non [tower] establishment with another player, on your turn only\"},\r\n    {name: 'Train Station', type: 'landmark', icon: 'tower', cost: 4, activation: [0], quantity: 4, set: 'base', description:\"You may roll 1 or 2 dice\"},\r\n    {name: 'Train Station', type: 'landmark', icon: 'tower', cost: 4, activation: [0], quantity: 1, set: 'harbor', description:\"You may roll 1 or 2 dice\"},\r\n    {name: 'Shopping Mall', type: 'landmark', icon: 'tower', cost: 10, activation: [0], quantity: 4, set: 'base', description:\"Each of your [cup] and [bread] establishments earn +1 coin\"},\r\n    {name: 'Shopping Mall', type: 'landmark', icon: 'tower', cost: 10, activation: [0], quantity: 1, set: 'harbor', description:\"Each of your [cup] and [bread] establishments earn +1 coin\"},\r\n    {name: 'Amusement Park', type: 'landmark', icon: 'tower', cost: 16, activation: [0], quantity: 4, set: 'base', description:\"If you roll doubles, take another turn after this one\"},\r\n    {name: 'Amusement Park', type: 'landmark', icon: 'tower', cost: 16, activation: [0], quantity: 1, set: 'harbor', description:\"If you roll doubles, take another turn after this one\"},\r\n    {name: 'Radio Tower', type: 'landmark', icon: 'tower', cost: 22, activation: [0], quantity: 4, set: 'base', description:\"Once every turn, you can choose to re-roll your dice\"},\r\n    {name: 'Radio Tower', type: 'landmark', icon: 'tower', cost: 22, activation: [0], quantity: 1, set: 'harbor', description:\"Once every turn, you can choose to re-roll your dice\"},\r\n    {name: 'Flower Orchard', type: 'primary', icon: 'wheat', cost: 2, activation: [4], quantity: 6, set: 'harbor', description:\"Get 1 coin from the bank, on anyone's turn\"},\r\n    {name: 'Mackerel Boat', type: 'primary', icon: 'boat', cost: 2, activation: [8], quantity: 6, set: 'harbor', description:\"If you have a harbor, get 3 coins from the bank on anyone's turn\"},\r\n    {name: 'Tuna Boat', type: 'primary', icon: 'boat', cost: 5, activation: [12,13,14], quantity: 6, set: 'harbor', description:\"On anyone's turn: the current player rolls 2 dice, if you have a harbor you get as many coins as the dice total\"},\r\n    {name: 'Flower Shop', type: 'secondary', icon: 'bread', cost: 1, activation: [6], quantity: 6, set: 'harbor', description:\"Get 1 coin from the bank for each flower orchard you own, on your turn only\"},\r\n    {name: 'Food Warehouse', type: 'secondary', icon: 'factory', cost: 2, activation: [12,13], quantity: 6, set: 'harbor', description:\"Get 2 coins from the bank for each [cup] establishment that you own, on your turn only\"},\r\n    {name: 'Sushi Bar', type: 'restaurants', icon: 'cup', cost: 4, activation: [1], quantity: 6, set: 'harbor', description:\"If you have a harbor, you get 3 coins from the player who rolled the dice\"},\r\n    {name: 'Pizza Joint', type: 'restaurants', icon: 'cup', cost: 1, activation: [7], quantity: 6, set: 'harbor', description:\"Get 1 coin from the player who rolled the dice\"},\r\n    {name: 'Hamburger Stand', type: 'restaurants', icon: 'cup', cost: 1, activation: [8], quantity: 6, set: 'harbor', description:\"Get 1 coin from the player who rolled the dice\"},\r\n    {name: 'Publisher', type: 'major', icon: 'tower', cost: 5, activation: [7], quantity: 5, set: 'harbor', description:\"get 1 coin from each player for each [cup] and [bread] establishment they have, on your turn only\"},\r\n    {name: 'Tax Office', type: 'major', icon: 'tower', cost: 5, activation: [7], quantity: 5, set: 'harbor', description:\"Take half (rounded down) of the coins from each player who has 10 coins or more, on your turn only\"},\r\n    {name: 'City Hall', type: 'landmark', icon: 'tower', cost: 0, activation: [0], quantity: 5, set: 'harbor', description:\"Immediately before buying establishments, if you have 0 coins, get 1 from the bank\"},\r\n    {name: 'Harbor', type: 'landmark', icon: 'tower', cost: 2, activation: [0], quantity: 5, set: 'harbor', description:\"If the dice total is 10 or more, you may add 2 to the total, on your turn only\"},\r\n    {name: 'Airport', type: 'landmark', icon: 'tower', cost: 30, activation: [0], quantity: 5, set: 'harbor', description:\"If you build nothing on your turn, you get 10 coins from the bank\"},\r\n  ]\r\n\r\n}\r\n\r\nconst getters = {\r\n  getStarterBase: (state) => {\r\n    return state.cards.filter(card => card.base == 'starter')\r\n  }\r\n}\r\n\r\nconst mutations = {\r\n  close_card: (state) => { \r\n    state.display = !state.display\r\n    console.log(state.cards);\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  close_card: (context) => {\r\n      context.commit('close_card');\r\n  }\r\n}\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}","  export default {\r\n    //   state\r\n    NewGame: true,\r\n    DiceRange: [],\r\n    Dice: null,\r\n    HasDice2: false,\r\n    Doubles: false,\r\n    Reroll: false,\r\n    FinishedRoll: false,\r\n    SpecialDice: null,\r\n    Expansion: false,\r\n    NumPlayers: 2,\r\n    Deck: [],\r\n    MarketPlace: [],\r\n    PopUpCard: null, // select card from marketplace to enlarge\r\n    CallCard: null, // [player, card] For Player select modal \r\n    CardGive: null, // Business Center swap cards\r\n    CardTake: null, // Business Center swap cards\r\n    StarterHand: [],\r\n    TurnPlayer: null,\r\n    IterPlayer: null,\r\n    TurnPlayerOwe: null,\r\n    IterPlayerOwe: null,\r\n    SelectPlayer: null,\r\n    SecondTurn: false,\r\n    IterOrder: [],\r\n    AirportCheckIn: null,\r\n    GlobalSwipe: 0,\r\n\r\n    // AI Variables\r\n    aiProjectedMoney: null,\r\n    aiDice: null,\r\n    aiStrategy: null, //strategy index\r\n    aiStrategies: [\r\n        {dice:2, cards:[{name:'Ranch',quantity:6}, {name:'Cheese Factory',quantity:2}]}, // cheeseFactory (best strategy)\r\n        {dice:1, cards:[{name:'Convenience Store',quantity:6}, {name:'Bakery',quantity:3}]}, // convenienceStore 2nd best\r\n        {dice:1, cards:[{name:'Wheat Field',quantity:2}, {name:'Ranch',quantity:2}, {name:'Bakery',quantity:2}, {name:'Forest',quantity:1}, {name:'Convenience Store',quantity:2},\r\n                              {name:'Cafe',quantity:2}, {name:'Family Restaurant',quantity:1}, {name:'Stadium',quantity:1}]}, //oneDieSpread\r\n        // bad strategies\r\n        {dice:1, cards:[{name:'Bakery',quantity:6}]}, //bakery\r\n        {dice:2, cards:[{name:'Forest',quantity:3}, {name:'Mine',quantity:3}, {name:'Furniture Factory',quantity:2}]}, //furnitureFactory\r\n        {dice:2, cards:[{name:'Wheat',quantity:6}, {name:'Fruit and Vegetable Market',quantity:3}, {name:'Furniture Factory',quantity:2}]}, //fruitVegetableMarket\r\n        {dice:2, cards:[{name:'Wheat',quantity:1}, {name:'Ranch',quantity:1}, {name:'Forest',quantity:1}, {name:'Mine',quantity:4}, {name:'Apple Orchard',quantity:1}]}, //mineBlueSpread\r\n        {dice:1, cards:[{name:'Wheat',quantity:1}, {name:'Ranch',quantity:1}, {name:'Forest',quantity:1}]} //blue1Die\r\n      ],\r\n    aiLandmarks: [],\r\n\r\n    TestCard: [\r\n        {name: 'Wheat Field', type: 'primary', icon: 'wheat', cost: 1, activation: [1], quantity: 6, set: 'base', description: \"Get 1 coin from the bank, on anyone's turn\"},\r\n        {name: 'Bakery', type: 'secondary', icon: 'bread', cost: 1, activation: [2,3], quantity: 6, set: 'base', description:\"Get 1 coin from the bank, on your turn only\"},\r\n        {name: 'Cafe', type: 'restaurants', icon: 'cup', cost: 2, activation: [3], quantity: 6, set: 'base', description:\"Get 1 coin from the player who rolled the dice\"},\r\n        {name: 'Stadium', type: 'major', icon: 'tower', cost: 6, activation: [6], quantity: 4, set: 'base', description:\"Get 2 coins from all players, on your turn only\"},\r\n        {name: 'Train Station', type: 'landmark', icon: 'tower', cost: 4, activation: [0], quantity: 4, set: 'base', description:\"You may roll 1 or 2 dice\"}\r\n    ],\r\n\r\n    Players: [ // 1-4 player objects\r\n        {\r\n            id: 'P1',\r\n            name: '',\r\n            money: 0,\r\n            hand: [], // all cards\r\n            landmarks: {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false}, \r\n            ai: {is: null, strategy: null} // false = human\r\n        },\r\n        {\r\n            id: 'P2',\r\n            name: '',\r\n            money: 0,\r\n            hand: [], // all cards\r\n            landmarks: {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false}, \r\n            ai: {is: null, strategy: null} // false = human\r\n        },\r\n        {\r\n            id: 'P3',\r\n            name: '',\r\n            money: 0,\r\n            hand: [], // all cards\r\n            landmarks: {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false},            \r\n            ai: {is: null, strategy: null} // false = human\r\n        },\r\n        {\r\n            id: 'P4',\r\n            name: '',\r\n            money: 0,\r\n            hand: [], // all cards\r\n            landmarks: {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false}, \r\n            ai: {is: null, strategy: null} // false = human\r\n        },\r\n        {\r\n            id: 'P5',\r\n            name: '',\r\n            money: 0,\r\n            hand: [], // all cards\r\n            landmarks: {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false}, \r\n            ai: {is: null, strategy: null} // false = human\r\n        },\r\n    ],\r\n\r\n  }\r\n","import state from './state.js'\r\n\r\nconst getters = {\r\n}\r\n\r\nconst mutations = {\r\n  setNewGame: (state, payload) => {\r\n    state.NewGame = payload\r\n  },\r\n  setExpansion: (state, payload) => {\r\n    state.Expansion = payload\r\n  },\r\n  setAI: (state, payload) => {\r\n    // payload = player index, true/false, strategy\r\n    // console.log('set AI', payload);\r\n    console.log('setting ai', payload, state.Players[payload[0]]);\r\n    state.Players[payload[0]].ai.is = payload[1]\r\n    state.Players[payload[0]].ai.strategy = payload[2]\r\n  },\r\n  setPlayerName: (state, payload) => {\r\n    // payload = player index, true/false\r\n    // console.log('set AI', payload);\r\n    state.Players[payload[0]].name = payload[1]\r\n    console.log('set Player Name', state.Players[payload[0]].name);\r\n  },\r\n  loadDeck: (state, payload) => {\r\n    // payload = player index, true/false\r\n    state.Deck = payload\r\n    console.log('load Deck mutation', payload);\r\n  },\r\n  setStarterHand: (state, payload) => {\r\n    // pass player hand and the starter hand to be mutated/assigned\r\n    state.StarterHand = payload\r\n  },\r\n  setMarketPlace: (state, payload) => {\r\n    state.MarketPlace = payload\r\n    console.log('set MarketPlace mutation', state.MarketPlace);\r\n  },\r\n  setNumPlayers: (state, payload) => {\r\n    // console.log('mutations setnumplayers', state, payload);\r\n    state.NumPlayers = payload\r\n\r\n    for(let i=0; i<5; i++){\r\n      state.Players[i].hand =[]\r\n      state.Players[i].money = null\r\n      state.Players[i].landmarks = {'Train Station':false, 'Shopping Mall':false, 'Amusement Park':false, 'Radio Tower':false, 'Harbor':false, 'Airport':false}      \r\n    }\r\n    \r\n    console.log('All players', state.Players);\r\n  },\r\n  DealGame: () => {\r\n    \r\n    for (let i = 0; i < state.NumPlayers; i++) {\r\n      for(let j=0; j<state.StarterHand.length; j++){\r\n        const shCard = state.StarterHand[j]\r\n        const card = {\r\n          name: shCard.name, \r\n          type: shCard.type, \r\n          icon: shCard.icon, \r\n          cost: shCard.cost, \r\n          activation: shCard.activation, \r\n          quantity: 1, \r\n          set: shCard.set, \r\n          description: shCard.description\r\n        }\r\n        switch (i) {\r\n          case 0:\r\n            state.Players[0].hand.push(card)\r\n            break;\r\n          case 1:\r\n            state.Players[1].hand.push(card)\r\n            break;\r\n          case 2:\r\n            state.Players[2].hand.push(card)\r\n            break;\r\n          case 3:\r\n            state.Players[3].hand.push(card)\r\n            break;\r\n          case 4:\r\n            state.Players[4].hand.push(card)\r\n            break;\r\n        }\r\n        console.log('dealgame loop', i, j);\r\n      // console.log('DealGame Mutate', state);\r\n      }\r\n    }\r\n     \r\n    \r\n  }\r\n\r\n}\r\n\r\nconst actions = {\r\n  // commit mutations\r\n  setNewGame: (context, payload) => {\r\n    context.commit('setNewGame',payload)\r\n  },\r\n  setExpansion: (context, payload) => {\r\n    context.commit('setExpansion',payload)\r\n  },\r\n  setAI: (context, payload) => {\r\n    context.commit('setAI',payload)\r\n  },\r\n  DealGame: (context) => {\r\n    context.commit('DealGame');\r\n  },\r\n  setNumPlayers: (context, payload) => {\r\n    context.commit('setNumPlayers', payload);\r\n  },\r\n  getNumPlayersNewGame: (context) => {\r\n    context.dispatch('SetNewGameDisplay', false) //action\r\n    context.dispatch('SetNumPlayersDisplay', true) //action\r\n    if(confirm('Would you like to play the Harbor Expansion?')){\r\n      context.dispatch('setExpansion', true)\r\n    } else {\r\n      context.dispatch('setExpansion', false)\r\n    }\r\n  },\r\n  setNumPlayersNewGame: (context, payload) => {\r\n    // payload = player index, name, ai\r\n    context.dispatch('setPlayerName', [payload[0], payload[1]])\r\n    context.dispatch('setAIStrategy')\r\n    context.dispatch('setAI', [payload[0], payload[2], payload[3]])\r\n  },\r\n  setPlayerName: (context, payload) => {\r\n    context.commit('setPlayerName', payload)\r\n  },\r\n  setStarterHand: (context) => {\r\n    // console.log('action SetStarterHand', context);\r\n    console.log('set Starter Hand  action', context.rootState);\r\n    const baseHand = context.rootState.cards.cards.filter(card => card.set=='starter')\r\n    baseHand.forEach(card => {\r\n      card.quantity = 1\r\n    })\r\n    if(context.state.Expansion == true){\r\n      baseHand.push({name: 'City Hall', type: 'landmark', icon: 'tower', cost: 0, activation: [0], quantity: 5, set: 'harbor', description:\"Immediately before buying establishments, if you have 0 coins, get 1 from the bank\"})\r\n    } \r\n    context.commit('setStarterHand', baseHand)\r\n  },\r\n  setMarketPlace: (context) => {\r\n    if(context.state.MarketPlace.length){context.commit('setMarketPlace',[])}\r\n\r\n    // console.log('set MarketPlace',context.rootState.cards.cards);\r\n    if(state.Expansion == false){\r\n      context.commit('setMarketPlace', copyCards(context.rootState.cards.cards.filter(card => card.set=='base')))\r\n    } else{\r\n      context.dispatch('loadDeck')\r\n      context.dispatch('reloadMarketPlace')\r\n    }\r\n  },\r\n  loadDeck: (context) => {\r\n    let expDeck = []\r\n    let expCard = {}\r\n\r\n    const tempDeck = copyCards(context.rootState.cards.cards.filter(card => (card.set=='base' || card.set=='harbor') && card.type!='landmark'))\r\n\r\n    for(let i=0; i<tempDeck.length; i++){\r\n      for(let j=1; j<=tempDeck[i].quantity; j++){\r\n        expCard = {}\r\n        Object.assign(expCard, tempDeck[i])\r\n        expCard.quantity = 1\r\n        expDeck.push(expCard)\r\n      }\r\n    }\r\n    expDeck = shuffle(expDeck)\r\n    context.commit('loadDeck', expDeck)\r\n  },\r\n\r\n  reloadMarketPlace: (context) => {\r\n    if(context.state.Expansion == false) {return} //make sure it's harbor expansion game\r\n\r\n    let tempMarketPlace = []\r\n    const getMP = context.rootState.gameplay.gameplay.MarketPlace //pointer\r\n    let TS = {}\r\n    let SM = {}\r\n    let AP = {}\r\n    let RT = {}\r\n    let H = {}\r\n    let A = {}\r\n\r\n    // get the landmarks quantities\r\n    if(getMP.length){\r\n      TS = getMP.filter(c => c.name=='Train Station')[0]\r\n      SM = getMP.filter(c => c.name=='Shopping Mall')[0]\r\n      AP = getMP.filter(c => c.name=='Amusement Park')[0]\r\n      RT = getMP.filter(c => c.name=='Radio Tower')[0]\r\n      H = getMP.filter(c => c.name=='Harbor')[0]\r\n      A = getMP.filter(c => c.name=='Airport')[0]\r\n\r\n      tempMarketPlace = getMP.filter(c=>c.type!='landmark')\r\n    } else {\r\n      TS = {name: 'Train Station', type: 'landmark', icon: 'tower', cost: 4, activation: [0], quantity: 5, set: 'base', description:\"You may roll 1 or 2 dice\"}\r\n      SM = {name: 'Shopping Mall', type: 'landmark', icon: 'tower', cost: 10, activation: [0], quantity: 5, set: 'base', description:\"Each of your [cup] and [bread] establishments earn +1 coin\"}\r\n      AP = {name: 'Amusement Park', type: 'landmark', icon: 'tower', cost: 16, activation: [0], quantity: 4, set: 'base', description:\"If you roll doubles, take another turn after this one\"}\r\n      RT = {name: 'Radio Tower', type: 'landmark', icon: 'tower', cost: 22, activation: [0], quantity: 4, set: 'base', description:\"Once every turn, you can choose to re-roll your dice\"}\r\n      H = {name: 'Harbor', type: 'landmark', icon: 'tower', cost: 2, activation: [0], quantity: 5, set: 'harbor', description:\"If the dice total is 10 or more, you may add 2 to the total, on your turn only\"}\r\n      A = {name: 'Airport', type: 'landmark', icon: 'tower', cost: 30, activation: [0], quantity: 5, set: 'harbor', description:\"If you build nothing on your turn, you get 10 coins from the bank\"}\r\n      \r\n      Object.assign(tempMarketPlace, context.rootState.gameplay.gameplay.MarketPlace) // create a temp Marketplace and reload it\r\n    }\r\n\r\n    console.log('reload marketplace temp market', tempMarketPlace);\r\n    while(tempMarketPlace.length<10){\r\n      if(context.state.Deck.length > 0){\r\n        const tempCard = context.state.Deck.pop()\r\n        const hasCard = tempMarketPlace.filter(temp => temp.name == tempCard.name) \r\n        \r\n        if(hasCard.length){\r\n            hasCard[0].quantity++\r\n        } else {\r\n          tempMarketPlace.push(tempCard)\r\n        }\r\n      }\r\n    }\r\n\r\n    // reassign landmarks\r\n    tempMarketPlace.push(TS)\r\n    tempMarketPlace.push(SM)\r\n    tempMarketPlace.push(AP)\r\n    tempMarketPlace.push(RT)\r\n    tempMarketPlace.push(H)\r\n    tempMarketPlace.push(A)\r\n\r\n    context.commit('setMarketPlace', tempMarketPlace)\r\n\r\n    console.log('reload MarketPlace', tempMarketPlace);\r\n\r\n    \r\n  },\r\n  \r\n  \r\n\r\n  // New & Reset Game Setups\r\n  ResetGame: (context) => {\r\n    context.dispatch('setNewGame', true) \r\n    context.dispatch('SetNewGameDisplay', true) \r\n    context.dispatch('SetMarketPlaceDisplay', false) \r\n    context.dispatch('SetDiceDisplay', false) \r\n    context.dispatch('SetTabDisplay', false) \r\n    context.dispatch('SetPlayerDisplay', [0, false]) \r\n    context.dispatch('SetPlayerDisplay', [1, false]) \r\n    context.dispatch('SetPlayerDisplay', [2, false]) \r\n    context.dispatch('SetPlayerDisplay', [3, false]) \r\n    context.dispatch('SetPlayerDisplay', [4, false])\r\n    context.dispatch('SetAllPlayerDisplay',false)\r\n    context.dispatch('setHasDice2', false)\r\n     \r\n  },\r\n  SetUpNewGame: (context) => {\r\n    // Toggle component displays\r\n    context.dispatch('nextPlayerTurn')\r\n    context.dispatch('SetNewGameDisplay', false) //action\r\n    context.dispatch('SetNumPlayersDisplay', false) //action\r\n    // context.dispatch('SetMarketPlaceDisplay', true) //action\r\n    context.dispatch('SetDiceDisplay', true) //action\r\n    context.dispatch('SetTabDisplay', true) //action\r\n    context.dispatch('SetAllPlayerDisplay', true) //action\r\n    context.dispatch('SetPlayerDisplay', [0, true])\r\n    context.dispatch('SetPlayerDisplay', [1, true])\r\n    if (context.state.NumPlayers >2) {context.dispatch('SetPlayerDisplay', [2, true])}\r\n    if (context.state.NumPlayers >3) {context.dispatch('SetPlayerDisplay', [3, true])}\r\n    if (context.state.NumPlayers >4) {context.dispatch('SetPlayerDisplay', [4, true])}\r\n\r\n    \r\n    context.dispatch('setMarketPlace') //create marketplace\r\n    context.dispatch('setStarterHand') //create starter hands  \r\n    context.dispatch('DealGame'); //deal hands\r\n        \r\n    // //set player properties\r\n    context.dispatch('modMoney',[0, 3]);\r\n    context.dispatch('modMoney',[1, 3]);\r\n    context.dispatch('modMoney',[2, 3]);\r\n    context.dispatch('modMoney',[3, 3]);\r\n    context.dispatch('modMoney',[4, 3]);\r\n  },\r\n\r\n  SetUpQuickGameBase: (context) => {\r\n    // Toggle component displays\r\n    context.dispatch('nextPlayerTurn')\r\n    context.dispatch('SetNewGameDisplay', false) //action\r\n    // context.dispatch('SetMarketPlaceDisplay', true) //action\r\n    context.dispatch('SetDiceDisplay', true) //action\r\n    context.dispatch('SetTabDisplay', true) //action\r\n    context.dispatch('SetAllPlayerDisplay', true) //action\r\n    context.dispatch('SetPlayerDisplay', [0, true]) //action\r\n    context.dispatch('SetPlayerDisplay', [1, true]) //action\r\n    \r\n    context.dispatch('setExpansion', false) //base or expansion\r\n    context.dispatch('setMarketPlace') //create marketplace\r\n    context.dispatch('setNumPlayers', 2) //set number of players\r\n    context.dispatch('setStarterHand') //create starter hands  \r\n    context.dispatch('DealGame'); //deal hands\r\n    context.dispatch('setAIStrategy') //set AI strategy\r\n    \r\n    // //set player properties\r\n    context.dispatch('modMoney',[0, 3]);\r\n    context.dispatch('modMoney',[1, 3]);\r\n    context.dispatch('setPlayerName',[0, '']);\r\n    context.dispatch('setPlayerName',[1, '']);\r\n    context.dispatch('setAIStrategy')\r\n    context.dispatch('setAI',[0, false, context.state.aiStrategy]);\r\n    context.dispatch('setAIStrategy') //set AI strategy\r\n    context.dispatch('setAI',[1, true, context.state.aiStrategy]);\r\n    \r\n    console.log('setup quick game display', context.rootState.display);\r\n  },\r\n  SetUpQuickGameExpansion: (context) => {\r\n    // Toggle component displays\r\n    context.dispatch('nextPlayerTurn')\r\n    context.dispatch('SetNewGameDisplay', false) //action\r\n    // context.dispatch('SetMarketPlaceDisplay', true) //action\r\n    context.dispatch('SetDiceDisplay', true) //action\r\n    context.dispatch('SetTabDisplay', true) //action\r\n    context.dispatch('SetAllPlayerDisplay', true) //action\r\n    context.dispatch('SetPlayerDisplay', [0, true]) //action\r\n    context.dispatch('SetPlayerDisplay', [1, true]) //action\r\n    \r\n    context.dispatch('setExpansion', true) //base or expansion\r\n    context.dispatch('setMarketPlace') //create marketplace\r\n    context.dispatch('setNumPlayers', 2) //set number of players\r\n    context.dispatch('setStarterHand') //create starter hands  \r\n    context.dispatch('DealGame'); //deal hands\r\n    context.dispatch('setAIStrategy') //set AI strategy\r\n    \r\n    // //set player properties\r\n    context.dispatch('setPlayerName',[0, '']);\r\n    context.dispatch('setPlayerName',[1, '']);\r\n    context.dispatch('modMoney',[0, 3]);\r\n    context.dispatch('modMoney',[1, 3]);\r\n    context.dispatch('setAIStrategy')\r\n    context.dispatch('setAI',[0, false, context.state.aiStrategy]);\r\n    context.dispatch('setAIStrategy') //set AI strategy\r\n    context.dispatch('setAI',[1, true, context.state.aiStrategy]);\r\n    \r\n    console.log('setup quick game display', context.rootState.display);\r\n  },\r\n  \r\n}\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction copyCards(array) {\r\n  let newArray = []\r\n\r\n  for(let j=0; j<array.length; j++){\r\n    const shCard = array[j]\r\n    const card = {\r\n      name: shCard.name, \r\n      type: shCard.type, \r\n      icon: shCard.icon, \r\n      cost: shCard.cost, \r\n      activation: shCard.activation, \r\n      quantity: shCard.quantity, \r\n      set: shCard.set, \r\n      description: shCard.description\r\n    }\r\n    newArray.push(card)\r\n  }\r\n  return newArray\r\n}\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}","import state from './state.js'\r\n\r\nconst getters = {\r\n  getDice: (state) => {\r\n    return state.Dice\r\n  },\r\n}\r\n\r\nconst mutations = {\r\n  setGlobalSwipe: (state) => {\r\n    state.GlobalSwipe = state\r\n  },\r\n  rollDice: (state) => {\r\n  // payload = low num & high num\r\n    const min = state.DiceRange[0]\r\n    const max = state.DiceRange[1]\r\n    state.Dice = Math.floor(Math.random() * (max - min))+ min \r\n    console.log('gameplay rollDice', state.Dice);\r\n  },\r\n  setDiceRange: (state, payload) => {\r\n    state.DiceRange =[]\r\n    state.DiceRange.push(payload[0])\r\n    state.DiceRange.push(payload[1])\r\n  },\r\n  setDoubles: (state, payload) => {\r\n    // payload = true/false\r\n    state.Doubles = payload\r\n  },\r\n  setHasDice2: (state, payload) => {\r\n    // payload = true/false\r\n    state.HasDice2 = payload\r\n  },\r\n  setHarbor: (state) => {\r\n    // payload = true/false\r\n    state.Dice += 2\r\n  },\r\n  setAirportCheckIn: (state) => {\r\n    // payload = true/false\r\n    state.AirportCheckIn = state.Players[state.TurnPlayer].money\r\n  },\r\n  setSecondTurn: (state, payload) => {\r\n    // payload = true/false\r\n    state.SecondTurn = payload\r\n  },\r\n  modMoney: (state, payload) => {\r\n    // payload = player, amount\r\n    const playerInd = getPlayerIndex(payload[0])\r\n    const amount = payload[1]\r\n    \r\n    console.log('gameplay mutation modMoney', state, payload);\r\n    state.Players[playerInd].money += amount\r\n    // payload[0].money += payload[1]\r\n    // payload[0].money += payload[1]\r\n  },\r\n  transferMoney: (state, payload) => {\r\n    // payload = from player index, to player index, amount\r\n    console.log('gameplay mutation transferMoney', state, payload);\r\n    const fromPlayer = payload[0]\r\n    const toPlayer = payload[1]\r\n    const amount = payload[2]\r\n\r\n    if (state.Players[fromPlayer].money <= amount){\r\n      state.Players[toPlayer].money += state.Players[fromPlayer].money \r\n      state.Players[fromPlayer].money = 0\r\n    } else {\r\n      state.Players[toPlayer].money += amount\r\n      state.Players[fromPlayer].money -= amount\r\n    }\r\n  },\r\n  buyCard: (state, payload) => {\r\n    // payload = card\r\n    console.log('gameplay mutation BuyCard', state, payload);\r\n    const currPlayer = state.Players[state.TurnPlayer]\r\n    const card = {\r\n      name: payload.name, \r\n      type: payload.type, \r\n      icon: payload.icon, \r\n      cost: payload.cost, \r\n      activation: payload.activation, \r\n      quantity: 1, \r\n      set: payload.set, \r\n      description: payload.description\r\n    }\r\n    // only buy 1 landmark\r\n    if (card.type == 'landmark'){\r\n      if(!currPlayer.landmarks[card.name] && currPlayer.money >= payload.cost){\r\n        currPlayer.landmarks[card.name] = true\r\n      } else {return}\r\n    }\r\n\r\n    // buy the card from marketplace and add to player hand\r\n    if (currPlayer.money >= payload.cost && payload.quantity > 0) {\r\n      payload.quantity-- // marketplace quantity -1\r\n      currPlayer.money = currPlayer.money - payload.cost \r\n\r\n      // make the card in hand 1 item instead of multiple by updating quantity\r\n      const hasCard = currPlayer.hand.filter(temp => temp.name == card.name) \r\n      console.log('hascard', hasCard, currPlayer.id);\r\n      if(hasCard.length){\r\n          hasCard[0].quantity++\r\n      } else {\r\n        currPlayer.hand.push(card)\r\n          console.log('push card',  currPlayer);\r\n      }\r\n    }\r\n  },\r\n  setPopUpCard: (state, payload) => {\r\n    // payload = card\r\n    state.PopUpCard = payload\r\n  },\r\n  setSelectCardGive: (state, payload) => {\r\n    // payload = card\r\n    state.CardGive = payload\r\n  },\r\n  setSelectCardTake: (state, payload) => {\r\n    // payload = card\r\n    state.CardTake = payload\r\n  },\r\n  SwapCards: (state, payload) => {\r\n    // payload = p1, p2, give card, take card\r\n    const p1 = payload[0]\r\n    const p2 = payload[1]\r\n    const give = payload[2]\r\n    const take = payload[3]\r\n\r\n    // remove cards\r\n    let giveHand = state.Players[p1].hand.find(c => c.name === give.name) // give card in p1 hand\r\n    let takeHand = state.Players[p2].hand.find(c => c.name === take.name) // take card in p2 hand\r\n    \r\n    console.log('swap cards mutation', state.Players[p2].hand.findIndex(c => c.name === take.name))\r\n\r\n    if (giveHand.quantity > 1){\r\n      giveHand.quantity--\r\n    } else {\r\n      state.Players[p1].hand = state.Players[p1].hand.filter(c => c.name != give.name)\r\n    }\r\n    if (takeHand.quantity > 1){\r\n      takeHand.quantity--\r\n    } else {\r\n      state.Players[p2].hand = state.Players[p2].hand.filter(c => c.name != take.name)\r\n    }\r\n    \r\n    // add cards\r\n    giveHand = state.Players[p1].hand.find(c => c.name === take.name) // give card in p1 hand\r\n    takeHand = state.Players[p2].hand.find(c => c.name === give.name) // take card in p2 hand\r\n    const giveCard = Object.assign({}, give);\r\n    const takeCard = Object.assign({}, take);\r\n    giveCard.quantity = 1\r\n    takeCard.quantity = 1\r\n\r\n    if (giveHand){\r\n      giveHand.quantity++\r\n    } else {\r\n      state.Players[p1].hand.push(takeCard)\r\n    }\r\n    if (takeHand){\r\n      takeHand.quantity++\r\n    } else {\r\n      state.Players[p2].hand.push(giveCard)\r\n    }\r\n\r\n\r\n  },\r\n  setTurnPlayer: (state, payload) => {\r\n    // payload = player\r\n    const playerInd = getPlayerIndex(payload)\r\n    state.TurnPlayer = playerInd - 1\r\n\r\n    // if (payload === 'P1') {state.TurnPlayer = 0}\r\n    // if (payload === 'P2') {state.TurnPlayer = 1}\r\n    // if (payload === 'P3') {state.TurnPlayer = 2}\r\n    // if (payload === 'P4') {state.TurnPlayer = 3}\r\n    // if (payload === 'P5') {state.TurnPlayer = 4}\r\n    // else {state.TurnPlayer = payload}\r\n    // console.log('gameplay setTurnPlayer', payload, state.P1);\r\n  },\r\n  setIterPlayer: (state, payload) => {\r\n    if (payload === 'P1') {state.IterPlayer = 0}\r\n    if (payload === 'P2') {state.IterPlayer = 1}\r\n    if (payload === 'P3') {state.IterPlayer = 2}\r\n    if (payload === 'P4') {state.IterPlayer = 3}\r\n    if (payload === 'P5') {state.IterPlayer = 4}\r\n    else {state.IterPlayer = payload}\r\n    // console.log('gameplay setTurnPlayer', payload, state.P1);\r\n  },\r\n  setSelectPlayer: (state, payload) => {\r\n    // payload = player index\r\n    state.SelectPlayer = payload\r\n    console.log('gameplay setSelectPlayer', payload, state.SelectPlayer);\r\n  },\r\n  setIterOrder: (state) => {\r\n    // sets the array of player indexes (ie: P1=0, P2=1...) in the order to evaluate based on the current player\r\n    state.IterOrder = []\r\n    for(var i=0; i<state.NumPlayers-1; i++){\r\n      state.IterOrder.push((state.NumPlayers+state.TurnPlayer-i-1) % state.NumPlayers)\r\n      console.log('setIterOrder', (state.NumPlayers+state.TurnPlayer-i-1) % state.NumPlayers);\r\n    }\r\n  },\r\n  nextPlayerTurn: (state) => {\r\n    // sets the array of player indexes (ie: P1=0, P2=1...) in the order to evaluate based on the current player\r\n\r\n    // initial setup\r\n    if (state.TurnPlayer === null) {state.TurnPlayer=0} \r\n    else {state.TurnPlayer++}\r\n    \r\n    // set next turn player\r\n    if (state.TurnPlayer >= state.NumPlayers){\r\n      state.TurnPlayer = 0\r\n      state.IterPlayer = state.NumPlayers-1\r\n    } else {\r\n      state.IterPlayer = state.TurnPlayer-1\r\n    }\r\n    \r\n    // reset Radio Tower to false\r\n    state.Reroll = false\r\n\r\n    console.log('nextPlayerTurn mutation', state.TurnPlayer, state.IterPlayer, state.IterOrder);\r\n    \r\n  },\r\n\r\n}\r\n\r\nconst actions = {\r\n  setGlobalSwipe: (context, payload) => {\r\n    context.dispatch('setGlobalSwipe', payload)\r\n  },\r\n  async rollDice (context) {\r\n    // payload = low, high \r\n    const curr = context.state.Players[context.state.TurnPlayer]\r\n    for(;;){\r\n\r\n      context.dispatch('SetDiceDisplay',false) //action\r\n      if(curr.ai.is){context.dispatch('aiChooseRollTwoDice')}\r\n  \r\n      await new Promise(resolve => setTimeout(resolve, 300))\r\n      \r\n      context.dispatch('SetDiceDisplay',true) //action\r\n      context.commit('rollDice');\r\n      \r\n      // Check for Harbor (10 or more, add 2)\r\n      if(context.state.Dice >= 10 && context.state.Players[context.state.TurnPlayer].landmarks['Harbor']){\r\n        if (curr.ai.is == false){\r\n          if(confirm(`You rolled: ${context.state.Dice} \\nDo you want to use the Harbor and add 2 to your roll?`)){ context.commit('setHarbor')}\r\n        } else {\r\n          context.dispatch('aiChooseHarborAdd')\r\n        }\r\n      }\r\n        \r\n      console.log('promise 2');\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, 0))\r\n  \r\n      // Radio Tower Re-Roll?\r\n      if (context.state.Reroll == true){ //did the player already reroll?\r\n        context.state.Reroll = false\r\n        break\r\n      } else { //has not rerolled\r\n          console.log('roll dice again',context.state.Players[context.state.IterOrder[context.state.IterOrder.length-1]].landmarks['Radio Tower']); \r\n  \r\n          if(context.state.Players[context.state.TurnPlayer].landmarks['Radio Tower'] && context.state.Reroll == false){ //if they have a radio tower ask if they would like to reroll and didn't reroll already\r\n            if(curr.ai.is==false){\r\n              if(!context.state.Reroll) { // reroll if they didn't reroll yet\r\n                if (confirm(`You rolled: ${context.state.Dice} \\nDo you want to re-roll?`)){\r\n                  context.state.Reroll = true\r\n                } else {\r\n                  break;\r\n                }  \r\n              } \r\n            } else {\r\n              context.dispatch('aiChooseReroll')\r\n              break;\r\n            }\r\n          }else {\r\n            break;\r\n          }\r\n      }\r\n    }\r\n\r\n    context.dispatch('setDoubles') \r\n    console.log('promise 3');\r\n\r\n  },\r\n  setDiceRange: (context, payload) => {\r\n    context.commit('setDiceRange', payload);\r\n  },\r\n  setDoubles: (context) => {\r\n    let rndNum = null\r\n    const doubles = [2,4,6,8,10,12]\r\n\r\n    if(context.state.HasDice2 && doubles.includes(context.state.Dice)){\r\n      if(context.state.Dice === 2 || context.state.Dice === 12){\r\n        context.commit('setDoubles', true)\r\n      } else if (context.state.Dice === 4 || context.state.Dice === 10) {\r\n        rndNum = Math.floor(Math.random() * (99 - 1) + 1)  \r\n        if(rndNum >= 66) {\r\n          context.commit('setDoubles', true)\r\n        }\r\n      } else if (context.state.Dice === 6 || context.state.Dice === 8) {\r\n        rndNum = Math.floor(Math.random() * (100 - 1) + 1)  \r\n        if(rndNum <= 20) {\r\n          context.commit('setDoubles', true)\r\n        }\r\n      }\r\n    } else {\r\n      context.commit('setDoubles', false)\r\n    }\r\n    \r\n  },\r\n  setHasDice2: (context, payload) => {\r\n    context.commit('setHasDice2', payload);\r\n  },\r\n  setSecondTurn: (context, payload) => {\r\n    context.commit('setSecondTurn', payload);\r\n  },\r\n  setTurnPlayer: (context, payload) => {\r\n    context.commit('setTurnPlayer', payload);\r\n  },\r\n  setIterPlayer: (context, payload) => {\r\n    context.commit('setIterPlayer', payload);\r\n  },\r\n  setSelectPlayer: (context, payload) => {\r\n    context.commit('setSelectPlayer', payload);\r\n  },\r\n  nextPlayerTurn: (context) => {\r\n    context.commit('nextPlayerTurn');\r\n    context.commit('setIterOrder');\r\n  },\r\n  setIterOrder: (context) => {\r\n    context.commit('setIterOrder');\r\n  },\r\n  buyCard: (context, payload) => {\r\n    if (context.state.NewGame===false) {context.commit('buyCard', payload)}\r\n    if(context.state.Expansion===true) {context.commit('setMarketPlace', context.state.MarketPlace.filter(c => c.quantity > 0 || c.type === 'landmark'))}\r\n    context.dispatch('reloadMarketPlace')\r\n    context.dispatch('endGame', payload);\r\n  },\r\n  setPopUpCard: (context, payload) => {\r\n    context.commit('setPopUpCard', payload);\r\n  },\r\n  setSelectCardGive: (context, payload) => {\r\n    context.commit('setSelectCardGive', payload);\r\n  },\r\n  setSelectCardTake: (context, payload) => {\r\n    context.commit('setSelectCardTake', payload);\r\n  },\r\n  SwapCards: (context, payload) => {\r\n    context.commit('SwapCards', payload);\r\n  },\r\n\r\n  modMoney: (context, payload) => {\r\n    context.commit('modMoney', payload);\r\n  },\r\n  transferMoney: (context, payload) => {\r\n    context.commit('transferMoney', payload);\r\n  },\r\n  setAirportCheckIn: (context) => {    \r\n    context.commit('setAirportCheckIn')\r\n  },\r\n  getAllState: (context) => {\r\n    console.log(context.rootState);\r\n  },\r\n  checkAirportCheckIn: (context) => {    \r\n    // Check Airport to get extra money\r\n    if (context.state.Players[context.state.TurnPlayer].money === context.state.AirportCheckIn && \r\n      context.state.Players[context.state.TurnPlayer].landmarks['Airport']) {\r\n      context.dispatch('modMoney', [context.state.TurnPlayer, 10])\r\n    }\r\n  },\r\n  checkTrainStation: (context) => {    \r\n    // Check Train Station for Next Player Dice\r\n    console.log('player turn checkTrainStation', context.state.Players[context.state.IterOrder[context.state.IterOrder.length-1]].landmarks['Train Station']);\r\n    // console.log('player turn action', context.state.Players[context.state.IterOrder.length-1].landmarks['Train Station']);\r\n    if (context.state.Players[context.state.IterOrder[context.state.IterOrder.length-1]].landmarks['Train Station']) {\r\n      context.dispatch('setHasDice2', true)\r\n    } else { \r\n      context.dispatch('setHasDice2', false)\r\n    }\r\n  },\r\n  checkAmusementPark: (context) => {\r\n    // check for amusement park\r\n    const curr = context.state.Players[context.state.TurnPlayer]\r\n    if(context.state.Doubles === true && \r\n      curr.landmarks['Amusement Park'] \r\n      // && context.state.SecondTurn === false // uncomment for only 1 second turn\r\n      ){\r\n      if(curr.ai.is === false){\r\n        alert('You rolled doubles and have an Amusement Park. Take another turn!')\r\n      }\r\n      context.dispatch('setSecondTurn', true)\r\n      console.log('second turn enabled', context.state.SecondTurn);\r\n    } else { \r\n      context.dispatch('setSecondTurn', false)\r\n      console.log('turning off second turn', context.state.SecondTurn);\r\n    }\r\n  },\r\n  checkCityHall: (context) => { //Immediately before buying establishments, if you have 0 coins, get 1 from the bank\r\n    if(context.state.Expansion == true && context.state.Players[context.state.TurnPlayer].money==0){\r\n      context.commit('modMoney',[context.state.TurnPlayer, 1])\r\n    }\r\n  },\r\n  checkNextTurnAI: (context) => {\r\n    const currPlayer = context.state.Players[context.state.TurnPlayer]\r\n    const nextPlayer = context.state.Players[context.state.IterOrder[context.state.IterOrder.length-1]]\r\n    console.log('checkAI', currPlayer);\r\n    if(currPlayer.ai.is===true && nextPlayer.ai.is===true){\r\n      context.dispatch('Controller')\r\n    }\r\n  },\r\n  endGame: (context) => {\r\n    const currPlayer = context.state.Players[context.state.TurnPlayer]\r\n    if(context.state.Expansion == false){ //base\r\n\r\n      if (currPlayer.landmarks['Train Station'] && \r\n          currPlayer.landmarks['Shopping Mall'] && \r\n          currPlayer.landmarks['Amusement Park'] && \r\n          currPlayer.landmarks['Radio Tower'] ) {\r\n            alert(`Congratulations! ${currPlayer.id} has won the game!`)\r\n            context.dispatch('ResetGame', true) //action\r\n      }\r\n    } else {\r\n      if (currPlayer.landmarks['Train Station'] && \r\n          currPlayer.landmarks['Shopping Mall'] && \r\n          currPlayer.landmarks['Amusement Park'] && \r\n          currPlayer.landmarks['Radio Tower'] && \r\n          currPlayer.landmarks['Harbor'] && \r\n          currPlayer.landmarks['Airport'] ) {\r\n            alert(`Congratulations! ${currPlayer.id} has won the game!`)\r\n            context.dispatch('ResetGame', true) //action\r\n      }\r\n    }\r\n  },\r\n  async Controller (context) {\r\n    // controls re/roll dice, player turn calculations, etc\r\n\r\n    // if(!context.state.FinishedRoll){\r\n      console.log('promise 0');\r\n\r\n      if(context.state.NewGame == false) { //Checks for new game\r\n        if(context.state.SecondTurn === false){ //Amusement Park, repeat turn\r\n          console.log('checking second turn', context.state.SecondTurn);\r\n          context.dispatch('checkAirportCheckIn') // Airport Check for harbor (gain 10 money)\r\n          context.dispatch('nextPlayerTurn') //switch players and end turn\r\n        }\r\n      } else {\r\n        context.dispatch('setNewGame', false) //Not a new game anymore\r\n      }\r\n\r\n      console.log('promise 1');\r\n      await context.dispatch('rollDice') //roll dice. checks for doubles, Harbor and Radio Tower rerolls\r\n      console.log('promise 4');\r\n      context.dispatch('playerTurn') //calculate hands\r\n      context.dispatch('setAirportCheckIn') //set Airport Check for harbor\r\n\r\n      // Player or AI buys stuff\r\n      if(context.state.Players[context.state.TurnPlayer].ai.is){context.dispatch('aiBuyCards')}\r\n      console.log(context.state.Players[context.state.TurnPlayer].id,context.state.Players[context.state.TurnPlayer].ai);\r\n\r\n      context.dispatch('checkAmusementPark') // repeat turn\r\n      \r\n      if(context.state.SecondTurn === false) { //if not repeat turn then check Train Station for next player's dices        \r\n        await context.dispatch('checkTrainStation') //set 1 or 2 dice for next player\r\n      }\r\n      console.log('promise 5')\r\n      context.dispatch('checkNextTurnAI') // if next player is an AI then continue rolling\r\n\r\n  },\r\n  playerTurn: (context) => {\r\n    // after dice Roll calculate all players hands and check landmarks\r\n\r\n    // 1. reverse order calculate other player's hands for money owed\r\n    for(let i=0; i<state.IterOrder.length; i++){\r\n      console.log('player turn action', state.IterOrder[i], typeof(i));\r\n      context.dispatch('setIterPlayer', state.IterOrder[i])\r\n      context.dispatch('calcHand', state.IterOrder[i])\r\n    }\r\n\r\n    // 2. calculate turn player's hand for money gained\r\n    context.dispatch('calcHand', state.TurnPlayer)\r\n    \r\n    // 3. check for city hall/expansion\r\n    context.dispatch('checkCityHall')\r\n\r\n    // 4. allow construction\r\n    \r\n  },\r\n  calcHand: (context, payload) => {\r\n    // computes all players hands starting with turn player going counter clockwise\r\n\r\n    // payload = player index\r\n    console.log('calcHand action',context.state, payload);\r\n    // console.log('calc hand action', context.state.Players[payload]);\r\n\r\n    // compute restaurants first\r\n    context.state.Players[payload].hand\r\n      .filter(card => card.type == 'restaurants')\r\n      .forEach(card => context.dispatch('calcCard',[payload, card]))\r\n      \r\n      // compute primary and secondary next\r\n      context.state.Players[payload].hand\r\n      .filter(card => card.type == 'primary' || card.type == 'secondary')\r\n      .forEach(card => context.dispatch('calcCard',[payload, card]))\r\n      \r\n      // compute major last\r\n      context.state.Players[payload].hand\r\n        .filter(card => card.type == 'major')\r\n        .forEach(card => context.dispatch('calcCard',[payload, card]))\r\n      \r\n  },\r\n  async calcCard (context, payload) {\r\n    // payload = player index, card\r\n    console.log('actions calcPrimary', payload) \r\n    \r\n    const player = payload[0]\r\n    const card = payload[1]\r\n    let shoppingMall = null\r\n    let getNumIcons = null\r\n    let getNumCards = null\r\n\r\n    if(context.state.Players[player].landmarks['Shopping Mall']){\r\n      shoppingMall = 1\r\n    } else {\r\n      shoppingMall = 0\r\n    }\r\n    \r\n    if (card.activation.includes(context.state.Dice)) {\r\n      switch (card.name){\r\n          case 'Wheat Field': //Get 1 coin from the bank, on anyone's turn\"\r\n              context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity]);\r\n              break;\r\n          case 'Ranch': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity]);\r\n              break; \r\n          case 'Bakery': //Get 1 coin from the bank, on your turn only\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), (1 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Cafe': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('transferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Convenience Store': //Get 3 coin from the bank, on your turn only\r\n            if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), (3 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Forest': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break;\r\n          case 'Cheese Factory': //Get 3 coins from the bank for each [cow] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='cow').length\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), 3*getNumIcons*card.quantity])}\r\n              break;\r\n          case 'Furniture Factory': //Get 3 coins from the bank for each [gear] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='gear').length\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), 3*getNumIcons*card.quantity])}\r\n              break;\r\n          case 'Mine': //Get 5 coins from the bank, on anyone's turn\r\n              context.commit('modMoney', [getPlayerIndex(player), 5*card.quantity])\r\n              break;\r\n          case 'Family Restaurant': //Get 2 coins from the player who rolled the dice\r\n              context.commit('modMoney', [getPlayerIndex(player), (1 + shoppingMall)*card.quantity])\r\n              break;\r\n          case 'Apple Orchard': //Get 3 coins from the bank, on anyone's turn\r\n              context.commit('modMoney', [getPlayerIndex(player), 3*card.quantity])\r\n              break;\r\n          case 'Fruit and Vegetable Market': // Get 2 coins from the bank for each [wheat] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='wheat').length\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), 2*getNumIcons])}\r\n              break;\r\n          case 'Stadium': //Get 2 coins from all players, on your turn only\r\n              if(player===context.state.TurnPlayer) {context.state.Players.forEach((p,i) => context.commit('transferMoney', [i, context.state.TurnPlayer, 2*card.quantity]))}    \r\n              break;\r\n          case 'TV Station': //Take 5 coins from any one player, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.CallCard = payload\r\n                context.dispatch('SetPickPlayerModalDisplay', true)\r\n              }\r\n              break;\r\n          case 'Business Center': //Trade one Non [tower] establishment with another player, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.CallCard = payload\r\n                context.dispatch('SetPickPlayerModalDisplay', true)\r\n              }\r\n              break;\r\n          // case 'Train Station': //You may roll 1 or 2 dice\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Shopping Mall': //Each of your [cup] and [bread] establishments earn +1 coin\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Amusement Park': //If you roll doubles, take another turn after this one\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Radio Tower': //Once every turn, you can choose to re-roll your dice\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              // break;\r\n          case 'Flower Orchard': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break;\r\n          case 'Mackerel Boat': //If you have a harbor, get 3 coins from the bank on anyone's turn\r\n              getNumCards = context.state.Players[player].hand.filter(card => card.name==='Harbor').length\r\n              if (getNumCards>0) {context.commit('modMoney', [getPlayerIndex(player), 3])}\r\n              break\r\n          case 'Tuna Boat': //On anyone's turn: the current player rolls 2 dice, if you have a harbor you get as many coins as the dice total\r\n              context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break\r\n          case 'Flower Shop': //Get 1 coin from the bank for each flower orchard you own, on your turn only\r\n              getNumCards = context.state.Players[player].hand.filter(card => card.name==='Flower Orchard').length\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), (1 + shoppingMall)*getNumCards*card.quantity])}\r\n              break\r\n          case 'Food Warehouse': //Get 2 coins from the bank for each [cup] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='cup').length\r\n              if(player===context.state.TurnPlayer) {context.commit('modMoney', [getPlayerIndex(player), 2*getNumIcons*card.quantity])}\r\n              break\r\n          case 'Sushi Bar': //If you have a harbor, you get 3 coins from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer && player.landmarks.harbor) {context.commit('transferMoney', [context.state.TurnPlayer, player, (3 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Pizza Joint ': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('transferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Hamburger Stand': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('transferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Publisher': //get 1 coin from each player for each [cup] and [bread] establishment they have, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.Players.forEach(function(p,i) {\r\n                  const getNumIcons = context.state.Players[i].hand.filter(card => card.icon==='cup').length\r\n                  const getNumIcons2 = context.state.Players[i].hand.filter(card => card.icon==='bread').length\r\n                  context.commit('transferMoney', [i, context.state.TurnPlayer, 1*getNumIcons*getNumIcons2*card.quantity])\r\n                }  \r\n              )}  \r\n              break\r\n          case 'Tax Office': //Take half (rounded down) of the coins from each player who has 10 coins or more, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.Players.forEach(function(p,i) {\r\n                  if(p.money>=10) {\r\n                    context.commit('transferMoney', [i, context.state.TurnPlayer, Math.floor(p.money/2)*card.quantity])\r\n                  }\r\n                }\r\n              )}  \r\n              break\r\n          // case 'City Hall': //Immediately before buying establishments, if you have 0 coins, get 1 from the bank\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n          // case 'Harbor': //If the dice total is 10 or more, you may add 2 to the total, on your turn only\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n          // case 'Airport': //If you build nothing on your turn, you get 10 coins from the bank\r\n          //     context.commit('modMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n      }\r\n    }\r\n\r\n  },\r\n//   Controller: (context) => {\r\n\r\n//   }\r\n}\r\n\r\nfunction getPlayerIndex(id) {\r\n  if (isNaN(id)) {\r\n    if (id.toUpperCase() === 'P1') {return 0}\r\n    if (id.toUpperCase() === 'P2') {return 1}\r\n    if (id.toUpperCase() === 'P3') {return 2}\r\n    if (id.toUpperCase() === 'P4') {return 3}\r\n    if (id.toUpperCase() === 'P5') {return 4}\r\n  } else {\r\n    if (id >=0 && id <=5) {return id}\r\n  }\r\n}\r\n\r\n// function waitForSelectPlayer(myVar){\r\n//   if(myVar != null){\r\n//     return true\r\n//   } else {setTimeout(waitForSelectPlayer, 250)}\r\n// }\r\n// function calcRestaurantsMajor(state, card) {\r\n//   switch (card.name) {\r\n//     case 'Cafe':\r\n//       context.commit('modMoney', [getPlayerIndex(player), 1])\r\n//       break\r\n\r\n//   }\r\n// }\r\n\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}","\r\nimport state from './state.js'\r\n\r\nconst getters = {\r\n}\r\n\r\nconst mutations = {\r\n  setAIDice: (state, payload) => {\r\n    state.aiDice = payload\r\n  },\r\n  setAIStrategy: (state, payload) => {\r\n    state.aiStrategy = payload\r\n  },\r\n  setAIStrategies: (state, payload) => {\r\n    state.aiStrategies = payload\r\n  },\r\n  setAILandmarks: (state, payload) => {\r\n    state.aiLandmarks = payload\r\n  },\r\n  \r\n  setAIMoney: (state, payload) => {\r\n    state.aiProjectedMoney = payload\r\n  },\r\n  aiModMoney:(state, payload) => {\r\n    // payload = player, amt\r\n    state.aiProjectedMoney += payload[1]\r\n  },\r\n  aiTransferMoney:(state, payload) => {\r\n    // payload = from, to, amt\r\n    if(payload[0] == state.TurnPlayer){\r\n      state.aiProjectedMoney -= payload[2]\r\n    } else {\r\n      state.aiProjectedMoney += payload[2]\r\n    }\r\n  },\r\n}\r\n\r\nconst actions = {\r\n  aiChooseRollTwoDice: (context) => {\r\n    if(context.state.Players[context.state.TurnPlayer].hand.some(s => {s.activation.some(t => t > 6)})){\r\n      console.log('ai chooses reroll');\r\n      context.dispatch('setDiceRange',[1,12])\r\n    } else {\r\n      context.dispatch('setDiceRange',[1,6])\r\n    }\r\n  },\r\n  aiChooseReroll: (context) => {\r\n    context.commit('setAIDice', context.state.Dice)\r\n    context.dispatch('aiPlayerTurn')\r\n    context.state.Reroll = true\r\n    if(context.state.aiProjectedMoney < 2){\r\n      console.log('ai chooses reroll');\r\n      context.dispatch('rollDice')\r\n    }\r\n  },\r\n  aiChooseHarborAdd: (context) => {\r\n    context.commit('setAIDice', context.state.Dice)\r\n    context.dispatch('aiPlayerTurn')\r\n    const oDice = context.state.aiProjectedMoney\r\n\r\n    context.commit('setAIDice', context.state.Dice+2)\r\n    context.dispatch('aiPlayerTurn')\r\n    const newDice = context.state.aiProjectedMoney\r\n\r\n    if(oDice < newDice){\r\n      console.log('ai chooses to add harbor +2');\r\n    }else {\r\n      console.log('ai stays with first roll');\r\n    }\r\n  },\r\n  aiBuyCards: (context) => {\r\n\r\n    // try to buy everything in the list it can then end turn\r\n    const curr = context.state.Players[context.state.TurnPlayer]\r\n    const tm = context.state.MarketPlace\r\n    const strategy = context.state.aiStrategies[curr.ai.strategy]\r\n    let boughtCard = false\r\n\r\n    console.log('ai buying cards', context.state);\r\n\r\n    for(let i=0; i<context.state.aiLandmarks.length; i++){ // try to buy all landmarks first\r\n      if(curr.hand.filter(c => c.name != context.state.aiLandmarks[i].name)[0].name){\r\n        if(curr.money >= tm.filter(c => c.name === context.state.aiLandmarks[i].name)[0].cost){\r\n          context.dispatch('buyCard', tm.filter(c => c.name === context.state.aiLandmarks[i].name)[0])\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    for(let j=0; j<strategy.cards.length; j++){\r\n      \r\n      if(tm.some(c => c.name === strategy.cards[j].name)){ // does marketplace have target card\r\n        if(curr.hand.some(h => h.name === strategy.cards[j].name)) {// if there is at least one card in hand\r\n          console.log('ai buying cards2',strategy.cards[j].name, curr.hand.filter(h => h.name === strategy.cards[j].name))\r\n          if(curr.hand.filter(h => h.name === strategy.cards[j].name)[0].quantity < strategy.cards[j].quantity){ // check quantity in hand >= target quantity\r\n            context.dispatch('buyCard', tm.filter(c => c.name === strategy.cards[j].name)[0])\r\n            boughtCard = true\r\n          }\r\n        }else {\r\n          context.dispatch('buyCard', tm.filter(c => c.name === strategy.cards[j].name)[0])\r\n          boughtCard = true\r\n        }\r\n      }\r\n    }\r\n    if(boughtCard === false && curr.money > 5 && context.state.Expansion === true) {\r\n      if(tm.filter(c => c.cost < 5).length){\r\n        context.dispatch('buyCard', tm.filter(c => c.cost <= 3)[0])\r\n        boughtCard = true\r\n      }\r\n    }\r\n\r\n\r\n\r\n  },\r\n\r\n\r\n  // Helper Functions\r\n  setAIStrategy: (context) => {\r\n    let aiLandmarks = []\r\n    // Strategies from: https://boardgamegeek.com/thread/1301080/complete-simulation-machi-koro-strategies\r\n    \r\n    // Pick a strategy\r\n    // if(context.state.aiStrategy == null){\r\n      const rndNum = Math.floor(Math.random() * 8) \r\n\r\n      context.commit('setAIStrategy', rndNum)\r\n      if(context.state.Expansion) {\r\n        aiLandmarks = [{name: 'Shopping Mall'}, {name: 'Train Station'}, {name: 'Amusement Park'}, {name: 'Radio Tower'}, {name: 'Harbor'}, {name: 'Airport'}]\r\n      } else {\r\n        aiLandmarks = [{name: 'Shopping Mall'}, {name: 'Train Station'}, {name: 'Amusement Park'}, {name: 'Radio Tower'}]\r\n      }\r\n      context.commit('setAILandmarks', aiLandmarks)\r\n\r\n      // if (context.state.Expansion===false){ //base set choose random\r\n      //   context.commit('setAIStrategy', rndNum)\r\n      //   if (rndNum >= 1 && rndNum <= 3) {aiLandmarks = [{name: 'Shopping Mall'}, {name: 'Train Station'}, {name: 'Amusement Park'}, {name: 'Radio Tower'}, {name: 'Harbor'}, {name: 'Airport'}]}\r\n      // } else {\r\n      //   let sInd = 0\r\n      //   let sim = 0.\r\n      //   let simCount = 0\r\n\r\n      //   context.state.aiStrategies.forEach((s, i) => { //check each strategy\r\n      //     context.state.MarketPlace.forEach(m => { //check each card in marketplace\r\n      //       if(s.cards.some(c => c.name === m.name)){ //compare each card in strategy to all marketplace cards\r\n      //         simCount += 1\r\n      //       }\r\n      //     })\r\n      //     if(simCount/s.length > sim){ \r\n      //       sim = simCount/s.length\r\n      //       sInd = i\r\n      //     }\r\n      //   })\r\n      //   context.commit('setAIStrategy', sInd)\r\n      //   if (sInd >= 1 && sInd <= 3) {aiLandmarks = [{name: 'Shopping Mall'}, {name: 'Train Station'}, {name: 'Amusement Park'}, {name: 'Radio Tower'}, {name: 'Harbor'}, {name: 'Airport'}]}\r\n      // }\r\n    // }\r\n    // if (aiLandmarks == []) {aiLandmarks = [{name: 'Train Station'},{name: 'Shopping Mall'}, {name: 'Amusement Park'}, {name: 'Radio Tower'}, {name: 'Harbor'}, {name: 'Airport'}]}\r\n\r\n    \r\n  },\r\n  aiPlayerTurn: (context) => {\r\n    // after dice Roll calculate all players hands and check landmarks\r\n    context.commit('setAIMoney',0)\r\n    // 1. reverse order calculate other player's hands for money owed\r\n    for(let i=0; i<state.IterOrder.length; i++){\r\n      console.log('player turn action', state.IterOrder[i], typeof(i));\r\n      context.dispatch('setIterPlayer', state.IterOrder[i])\r\n      context.dispatch('aiCalcHand', state.IterOrder[i])\r\n    }\r\n\r\n    // 2. calculate turn player's hand for money gained\r\n    context.dispatch('aiCalcHand', state.TurnPlayer)\r\n    \r\n    \r\n  },\r\n  aiCalcHand: (context, payload) => {\r\n    // computes all players hands starting with turn player going counter clockwise\r\n\r\n    // payload = player index\r\n    console.log('aiCalcHand action',context.state, payload);\r\n    // console.log('calc hand action', context.state.Players[payload]);\r\n\r\n    // compute restaurants first\r\n    context.state.Players[payload].hand\r\n      .filter(card => card.type == 'restaurants')\r\n      .forEach(card => context.dispatch('aiCalcCard',[payload, card]))\r\n      \r\n      // compute primary and secondary next\r\n      context.state.Players[payload].hand\r\n      .filter(card => card.type == 'primary' || card.type == 'secondary')\r\n      .forEach(card => context.dispatch('aiCalcCard',[payload, card]))\r\n      \r\n      // compute major last\r\n      context.state.Players[payload].hand\r\n        .filter(card => card.type == 'major')\r\n        .forEach(card => context.dispatch('aiCalcCard',[payload, card]))\r\n      \r\n  },\r\n  async aiCalcCard (context, payload) {\r\n    // payload = player index, card\r\n    console.log('actions calcPrimary', payload) \r\n    \r\n    const player = payload[0]\r\n    const card = payload[1]\r\n    let shoppingMall = null\r\n    let getNumIcons = null\r\n    let getNumCards = null\r\n\r\n    if(context.state.Players[player].landmarks['Shopping Mall']){\r\n      shoppingMall = 1\r\n    } else {\r\n      shoppingMall = 0\r\n    }\r\n    \r\n    if (card.activation.includes(context.state.aiDice)) {\r\n      switch (card.name){\r\n          case 'Wheat Field': //Get 1 coin from the bank, on anyone's turn\"\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity]);\r\n              break;\r\n          case 'Ranch': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity]);\r\n              break; \r\n          case 'Bakery': //Get 1 coin from the bank, on your turn only\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), (1 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Cafe': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('aiTransferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Convenience Store': //Get 3 coin from the bank, on your turn only\r\n            if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), (3 + shoppingMall)*card.quantity])}\r\n              break;\r\n          case 'Forest': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break;\r\n          case 'Cheese Factory': //Get 3 coins from the bank for each [cow] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='cow').length\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), 3*getNumIcons*card.quantity])}\r\n              break;\r\n          case 'Furniture Factory': //Get 3 coins from the bank for each [gear] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='gear').length\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), 3*getNumIcons*card.quantity])}\r\n              break;\r\n          case 'Mine': //Get 5 coins from the bank, on anyone's turn\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 5*card.quantity])\r\n              break;\r\n          case 'Family Restaurant': //Get 2 coins from the player who rolled the dice\r\n              context.commit('aiModMoney', [getPlayerIndex(player), (1 + shoppingMall)*card.quantity])\r\n              break;\r\n          case 'Apple Orchard': //Get 3 coins from the bank, on anyone's turn\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 3*card.quantity])\r\n              break;\r\n          case 'Fruit and Vegetable Market': // Get 2 coins from the bank for each [wheat] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='wheat').length\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), 2*getNumIcons])}\r\n              break;\r\n          case 'Stadium': //Get 2 coins from all players, on your turn only\r\n              if(player===context.state.TurnPlayer) {context.state.Players.forEach((p,i) => context.commit('aiTransferMoney', [i, context.state.TurnPlayer, 2*card.quantity]))}    \r\n              break;\r\n          case 'TV Station': //Take 5 coins from any one player, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.CallCard = payload\r\n                context.dispatch('SetPickPlayerModalDisplay', true)\r\n              }\r\n              break;\r\n          case 'Business Center': //Trade one Non [tower] establishment with another player, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.CallCard = payload\r\n                context.dispatch('SetPickPlayerModalDisplay', true)\r\n              }\r\n              break;\r\n          // case 'Train Station': //You may roll 1 or 2 dice\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Shopping Mall': //Each of your [cup] and [bread] establishments earn +1 coin\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Amusement Park': //If you roll doubles, take another turn after this one\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break;\r\n          // case 'Radio Tower': //Once every turn, you can choose to re-roll your dice\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              // break;\r\n          case 'Flower Orchard': //Get 1 coin from the bank, on anyone's turn\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break;\r\n          case 'Mackerel Boat': //If you have a harbor, get 3 coins from the bank on anyone's turn\r\n              getNumCards = context.state.Players[player].hand.filter(card => card.name==='Harbor').length\r\n              if (getNumCards>0) {context.commit('aiModMoney', [getPlayerIndex(player), 3])}\r\n              break\r\n          case 'Tuna Boat': //On anyone's turn: the current player rolls 2 dice, if you have a harbor you get as many coins as the dice total\r\n              context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n              break\r\n          case 'Flower Shop': //Get 1 coin from the bank for each flower orchard you own, on your turn only\r\n              getNumCards = context.state.Players[player].hand.filter(card => card.name==='Flower Orchard').length\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), (1 + shoppingMall)*getNumCards*card.quantity])}\r\n              break\r\n          case 'Food Warehouse': //Get 2 coins from the bank for each [cup] establishment that you own, on your turn only\r\n              getNumIcons = context.state.Players[player].hand.filter(card => card.icon==='cup').length\r\n              if(player===context.state.TurnPlayer) {context.commit('aiModMoney', [getPlayerIndex(player), 2*getNumIcons*card.quantity])}\r\n              break\r\n          case 'Sushi Bar': //If you have a harbor, you get 3 coins from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer && player.landmarks.harbor) {context.commit('aiTransferMoney', [context.state.TurnPlayer, player, (3 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Pizza Joint ': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('aiTransferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Hamburger Stand': //Get 1 coin from the player who rolled the dice\r\n              if(player!=context.state.TurnPlayer) {context.commit('aiTransferMoney', [context.state.TurnPlayer, player, (1 + shoppingMall)*card.quantity])}\r\n              break\r\n          case 'Publisher': //get 1 coin from each player for each [cup] and [bread] establishment they have, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.Players.forEach(function(p,i) {\r\n                  const getNumIcons = context.state.Players[i].hand.filter(card => card.icon==='cup').length\r\n                  const getNumIcons2 = context.state.Players[i].hand.filter(card => card.icon==='bread').length\r\n                  context.commit('aiTransferMoney', [i, context.state.TurnPlayer, 1*getNumIcons*getNumIcons2*card.quantity])\r\n                }  \r\n              )}  \r\n              break\r\n          case 'Tax Office': //Take half (rounded down) of the coins from each player who has 10 coins or more, on your turn only\r\n              if(player===context.state.TurnPlayer) {\r\n                context.state.Players.forEach(function(p,i) {\r\n                  if(p.money>=10) {\r\n                    context.commit('aiTransferMoney', [i, context.state.TurnPlayer, Math.floor(p.money/2)*card.quantity])\r\n                  }\r\n                }\r\n              )}  \r\n              break\r\n          // case 'City Hall': //Immediately before buying establishments, if you have 0 coins, get 1 from the bank\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n          // case 'Harbor': //If the dice total is 10 or more, you may add 2 to the total, on your turn only\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n          // case 'Airport': //If you build nothing on your turn, you get 10 coins from the bank\r\n          //     context.commit('aiModMoney', [getPlayerIndex(player), 1*card.quantity])\r\n          //     break\r\n      }\r\n    }\r\n  \r\n  }\r\n}\r\n\r\nfunction getPlayerIndex(id) {\r\n  if (isNaN(id)) {\r\n    if (id.toUpperCase() === 'P1') {return 0}\r\n    if (id.toUpperCase() === 'P2') {return 1}\r\n    if (id.toUpperCase() === 'P3') {return 2}\r\n    if (id.toUpperCase() === 'P4') {return 3}\r\n    if (id.toUpperCase() === 'P5') {return 4}\r\n  } else {\r\n    if (id >=0 && id <=5) {return id}\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}","import gamesetup from './gamesetup.js'\r\nimport gameplay from './gameplay.js'\r\nimport ai from './ai.js'\r\nimport state from './state.js'\r\n\r\nexport default {\r\n  modules: {\r\n    namespaced: true,\r\n    state,\r\n    gamesetup,\r\n    gameplay,\r\n    ai\r\n  }\r\n  \r\n}\r\n","\r\nconst state = {\r\n  \r\n    NewGameDisplay: true,\r\n    TabDisplay: false,\r\n    GameTabDisplay: true,\r\n    MarketPlaceTabDisplay: false,\r\n    NumPlayersDisplay: false,\r\n    MarketPlaceDisplay: false,\r\n    DiceDisplay: false,\r\n    CardDisplay: false,\r\n    PickPlayerModalDisplay: false,\r\n    PickPlayerCardsModalDisplay: false,\r\n    Player1Display: false,\r\n    Player2Display: false,\r\n    Player3Display: false,\r\n    Player4Display: false,\r\n    Player5Display: false,\r\n    AllPlayerDisplay: false\r\n  }\r\n  \r\n  const getters = {\r\n    GetPlayerDisplay: (state, player) => {\r\n      switch (player){\r\n        case 1:\r\n          return state.Player1Display;\r\n        case 2:\r\n          return state.Player2Display;\r\n        case 3:\r\n          return state.Player3Display;\r\n        case 4:\r\n          return state.Player4Display;\r\n        case 5:\r\n          return state.Player5Display;\r\n      }\r\n    },\r\n  }\r\n  \r\n  const mutations = {\r\n    SetNewGameDisplay: (state, value) => {\r\n        state.NewGameDisplay = value\r\n    },\r\n    SetTabDisplay: (state, value) => {\r\n        state.TabDisplay = value\r\n    },\r\n    SetGameTabDisplay: (state, value) => {\r\n        state.GameTabDisplay = value\r\n    },\r\n    SetMarketPlaceTabDisplay: (state, value) => {\r\n        state.MarketPlaceTabDisplay = value\r\n    },\r\n    SetNumPlayersDisplay: (state, value) => {\r\n        state.NumPlayersDisplay = value\r\n    },\r\n    SetMarketPlaceDisplay: (state, value) => {\r\n        state.MarketPlaceDisplay = value\r\n    },\r\n    SetDiceDisplay: (state, value) => {\r\n        state.DiceDisplay = value\r\n    },\r\n    SetCardDisplay: (state, value) => {\r\n        state.CardDisplay = value\r\n    },\r\n    SetPickPlayerModalDisplay: (state, value) => {\r\n        state.PickPlayerModalDisplay = value\r\n    },\r\n    SetPickPlayerCardsModalDisplay: (state, value) => {\r\n        state.PickPlayerCardsModalDisplay = value\r\n    },\r\n    SetAllPlayerDisplay: (state, value) => {\r\n        state.AllPlayerDisplay = value\r\n    },\r\n    SetPlayerDisplay: (state, payload) => {\r\n      // payload = player index, true/false\r\n      switch (payload[0]){\r\n        case 0:\r\n          state.Player1Display = payload[1];\r\n          break;\r\n        case 1:\r\n          state.Player2Display = payload[1]\r\n          break;\r\n        case 2:\r\n          state.Player3Display = payload[1]\r\n          break;\r\n        case 3:\r\n          state.Player4Display = payload[1]\r\n          break;\r\n        case 4:\r\n          state.Player5Display = payload[1]\r\n          break;\r\n      }\r\n    },\r\n  }\r\n  \r\n  const actions = {\r\n    SetNewGameDisplay: (context, value) => {\r\n      context.commit('SetNewGameDisplay', value);\r\n    },\r\n    SetTabDisplay: (context, value) => {\r\n      context.commit('SetTabDisplay', value);\r\n    },\r\n    SetGameTabDisplay: (context, value) => {\r\n      context.commit('SetGameTabDisplay', value);\r\n    },\r\n    SetMarketPlaceTabDisplay: (context, value) => {\r\n      context.commit('SetMarketPlaceTabDisplay', value);\r\n    },\r\n    SetNumPlayersDisplay: (context, value) => {\r\n      context.commit('SetNumPlayersDisplay', value);\r\n    },\r\n    SetMarketPlaceDisplay: (context, value) => {\r\n      context.commit('SetMarketPlaceDisplay', value);\r\n    },\r\n    SetDiceDisplay: (context, value) => {\r\n      context.commit('SetDiceDisplay', value);\r\n    },\r\n    SetCardDisplay: (context, value) => {\r\n      context.commit('SetCardDisplay', value);\r\n    },\r\n    SetPickPlayerModalDisplay: (context, value) => {\r\n      context.commit('SetPickPlayerModalDisplay', value);\r\n    },\r\n    SetPickPlayerCardsModalDisplay: (context, value) => {\r\n      context.commit('SetPickPlayerCardsModalDisplay', value);\r\n    },\r\n    SetAllPlayerDisplay: (context, payload) => {\r\n      context.commit('SetAllPlayerDisplay', payload);\r\n    },\r\n    SetPlayerDisplay: (context, payload) => {\r\n      context.commit('SetPlayerDisplay', payload);\r\n    },\r\n    ShowGame: (context) => {\r\n      context.dispatch('SetMarketPlaceTabDisplay', false)\r\n      context.dispatch('SetGameTabDisplay', true)\r\n\r\n      context.dispatch('SetMarketPlaceDisplay', false) \r\n      context.dispatch('SetDiceDisplay', true) \r\n      context.dispatch('SetAllPlayerDisplay',true) \r\n    },\r\n    ShowMarketplace: (context) => {\r\n      context.dispatch('SetMarketPlaceTabDisplay', true)\r\n      context.dispatch('SetGameTabDisplay', false)\r\n\r\n      context.dispatch('SetMarketPlaceDisplay', true)\r\n      context.dispatch('SetDiceDisplay', false) \r\n      context.dispatch('SetAllPlayerDisplay',false)       \r\n    },\r\n  }\r\n  \r\n  export default {\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n  }","import { createStore } from 'vuex'\nimport cards from './modules/cards.js'\nimport gameplay from './modules/gameplay/index.js'\nimport display from './modules/display.js'\n\nexport default createStore({\n  modules: {\n    cards,\n    display,\n    gameplay,\n  }\n  \n})\n","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport './registerServiceWorker'\r\nimport router from './router'\r\nimport store from './store'\r\n\r\nconst app = createApp(App)\r\n\r\n// app.directive('visible', function(el, binding) {\r\n//     el.style.visibility = !!binding.value ? 'visible' : 'hidden';\r\n// })\r\napp.use(store).use(router).mount('#app')"],"sourceRoot":""}